from tkinter import *
from tkinter import messagebox, Toplevel
from Controller import TruyTimKhoBauContronller
from tkinter import ttk
import tkinter.font as tkFont
from PIL import Image, ImageDraw, ImageTk
import math
import pygame
import time
import random
import datetime
import threading

#==============================================================================================
# hi·ªáu ·ª©ng m√†n h√¨nh win
class _Firework:
    def __init__(self, canvas, x, y):
        self.canvas = canvas
        self.particles = []
        # tƒÉng s·ªë l∆∞·ª£ng h·∫°t ƒë·ªÉ nh√¨n ho√†nh tr√°ng h∆°n
        for _ in range(50):
            ang = random.uniform(0, 2 * math.pi)
            spd = random.uniform(2, 6)  # t·ªëc ƒë·ªô m·∫°nh h∆°n
            vx, vy = spd * math.cos(ang), spd * math.sin(ang)
            dot = canvas.create_oval(
                x, y, x + 4, y + 4,
                fill=random.choice(["red", "yellow", "orange", "white", "blue", "green", "violet"]),
                outline=""
            )
            # life tƒÉng l√™n ƒë·ªÉ ch√°y l√¢u h∆°n
            self.particles.append({
                "id": dot,
                "x": x, "y": y,
                "vx": vx, "vy": vy,
                "life": random.randint(50, 80)
            })

    def step(self):
        alive = False
        for p in self.particles[:]:
            p["life"] -= 1
            if p["life"] <= 0:
                self.canvas.delete(p["id"])
                self.particles.remove(p)
                continue
            p["x"] += p["vx"]
            p["y"] += p["vy"]
            p["vy"] += 0.1  # tr·ªçng l·ª±c nh·∫π
            self.canvas.coords(p["id"], p["x"], p["y"], p["x"]+4, p["y"]+4)
            alive = True
        return alive
#==============================================================================================

class TruyTimKhoBauView():
    def __init__(self, selected_map="classic"):
        self.selected_map = selected_map
        print(f"üéØ Map ƒë∆∞·ª£c ch·ªçn: {self.selected_map}")

        self.cell_size = 40
        self.sound_on = True

        # --- √ÇM THANH ---
        pygame.mixer.init()
        self.set_theme()
        # try:
        #     pygame.mixer.music.load("D:/project_nhom_AI/AI_TruyTimKhoBau_2025/sounds/bg_music.mp3")
        #     pygame.mixer.music.play(-1)  # l·∫∑p v√¥ h·∫°n
        #     pygame.mixer.music.set_volume(0.5)  # ch·ªânh √¢m l∆∞·ª£ng
        # except Exception as e:
        #     print("Kh√¥ng th·ªÉ ph√°t nh·∫°c n·ªÅn:", e)

        self.run_history = []

        self.giaoDien()


    def set_theme(self):
        """ƒê·∫∑t m√†u s·∫Øc, nh·∫°c n·ªÅn, texture d·ª±a theo b·∫£n ƒë·ªì ƒë√£ ch·ªçn"""
        if self.selected_map == "classic":
            self.bg_color = "#1a1a2e"
            self.grass_color = "#4CAF50"
            self.wall_color = "#8D6E63"
            self.music_path = r"D:/HCMUTE_IT/HK1_2025-2026/Artificial Intelligence/BaoCaoCuoiKy/BaoCaoCK_1/project_nhom_AI/AI_TruyTimKhoBau_2025/sounds/bg_music.mp3"

        elif self.selected_map == "ocean":
            self.bg_color = "#001F3F"
            self.grass_color = "#0097A7"
            self.wall_color = "#006064"
            self.music_path = r"D:/HCMUTE_IT/HK1_2025-2026/Artificial Intelligence/BaoCaoCuoiKy/BaoCaoCK_1/project_nhom_AI/AI_TruyTimKhoBau_2025/sounds/ocean.mp3"  # nh·∫°c s√≥ng bi·ªÉn

        elif self.selected_map == "halloween":
            self.bg_color = "#2E1A47"
            self.grass_color = "#8E24AA"
            self.wall_color = "#BF360C"
            self.music_path = r"D:/HCMUTE_IT/HK1_2025-2026/Artificial Intelligence/BaoCaoCuoiKy/BaoCaoCK_1/project_nhom_AI/AI_TruyTimKhoBau_2025/sounds/halloween.mp3"

        else:
            # fallback
            self.bg_color = "#1a1a2e"
            self.grass_color = "#4CAF50"
            self.wall_color = "#8D6E63"
            self.music_path = r"D:/HCMUTE_IT/HK1_2025-2026/Artificial Intelligence/BaoCaoCuoiKy/BaoCaoCK_1/project_nhom_AI/AI_TruyTimKhoBau_2025/sounds/bg_music.mp3"

        # --- Ph√°t nh·∫°c n·ªÅn ---
        try:
            pygame.mixer.music.load(self.music_path)
            pygame.mixer.music.play(-1)
            pygame.mixer.music.set_volume(0.5)
        except Exception as e:
            print("Kh√¥ng th·ªÉ ph√°t nh·∫°c n·ªÅn:", e)

#==============================================================================================
# V·∫º C√ÅC ƒê·ªêI T∆Ø·ª¢NG MAP

    def ve_grass(self, size, is_dark=False):
        """T·∫°o texture c·ªè v·ªõi pattern xen k·∫Ω"""
        #light_green = '#7CB342' if not is_dark else '#689F38'
        #dark_green = '#689F38' if not is_dark else '#558B2F'
        if self.selected_map == "ocean":
            light_green = '#00BCD4' if not is_dark else '#0097A7'
            dark_green = '#00838F' if not is_dark else '#006064'
        elif self.selected_map == "halloween":
            light_green = '#8E24AA' if not is_dark else '#6A1B9A'
            dark_green = '#BF360C' if not is_dark else '#E65100'
        else:
            light_green = '#7CB342' if not is_dark else '#689F38'
            dark_green = '#689F38' if not is_dark else '#558B2F'
        
        img = Image.new('RGB', (size, size), light_green)
        draw = ImageDraw.Draw(img)
        
        # Pattern c·ªè
        for i in range(0, size, 6):
            for j in range(0, size, 6):
                if (i + j) % 12 == 0:
                    draw.ellipse([i, j, i+4, j+2], fill=dark_green)
                    draw.ellipse([i+1, j+1, i+5, j+3], fill='#8BC34A')
                elif (i * j) % 15 == 0:
                    draw.ellipse([i, j, i+2, j+4], fill='#9CCC65')
        
        # Texture nh·∫π
        for i in range(0, size, 3):
            for j in range(0, size, 3):
                if (i + j) % 9 == 0:
                    draw.rectangle([i, j, i+1, j+1], fill='#AED581')
        
        return ImageTk.PhotoImage(img)

    def ve_wall(self, size):
        """T·∫°o texture t∆∞·ªùng g·∫°ch"""
        #img = Image.new('RGB', (size, size), '#8D6E63')
        #base = self.wall_color if hasattr(self, "wall_color") else "#8D6E63"
        #img = Image.new('RGB', (size, size), base)
        base = getattr(self, "wall_color", "#8D6E63")
        img = Image.new('RGB', (size, size), base)

        draw = ImageDraw.Draw(img)
        
        brick_h = size // 3
        brick_w = size // 2
        
        for row in range(0, size + brick_h, brick_h):
            offset = brick_w // 2 if (row // brick_h) % 2 else 0
            for col in range(-offset, size + offset, brick_w):
                if col < size and row < size:
                    draw.rectangle([col, row, 
                                  min(col + brick_w - 2, size-1), 
                                  min(row + brick_h - 2, size-1)], 
                                 fill='#A1887F', outline='#6D4C41', width=1)
                    
                    if col + 2 < size and row + 1 < size:
                        draw.rectangle([col + 1, row + 1, 
                                      min(col + brick_w - 3, size-1), row + 2], 
                                     fill='#BCAAA4')
        
        return ImageTk.PhotoImage(img)

    def ve_player(self, size, path=r"D:/HCMUTE_IT/HK1_2025-2026/Artificial Intelligence/BaoCaoCuoiKy/BaoCaoCK_1/project_nhom_AI/AI_TruyTimKhoBau_2025/picture/boy.png"):
        """Load ·∫£nh c·∫≠u b√© player, t·ª± x√≥a n·ªÅn tr·∫Øng v√† scale v·ª´a kh√≠t √¥"""
        from PIL import Image, ImageTk

        try:
            img = Image.open(path).convert("RGBA")

            # --- T·ª± ƒë·ªông lo·∫°i b·ªè n·ªÅn tr·∫Øng ho·∫∑c n·ªÅn g·∫ßn tr·∫Øng ---
            datas = img.getdata()
            new_data = []
            for item in datas:
                # n·∫øu pixel s√°ng (tr·∫Øng ho·∫∑c x√°m nh·∫°t) ‚Üí l√†m trong su·ªët
                if item[0] > 230 and item[1] > 230 and item[2] > 230:
                    new_data.append((255, 255, 255, 0))
                else:
                    new_data.append(item)
            img.putdata(new_data)

            # --- C·∫Øt v√πng th·ª±c ƒë·ªÉ lo·∫°i b·ªè kho·∫£ng tr·ªëng ---
            bbox = img.getbbox()
            if bbox:
                img = img.crop(bbox)

            # --- Resize v·ª´a kh√≠t √¥ ---
            img = img.resize((size, size), Image.Resampling.LANCZOS)

            return ImageTk.PhotoImage(img)

        except Exception as e:
            print("‚ùå Kh√¥ng th·ªÉ t·∫£i ·∫£nh c·∫≠u b√© player:", e)
            # fallback n·∫øu l·ªói
            fallback = Image.new("RGBA", (size, size), (0, 0, 255, 255))
            draw = ImageDraw.Draw(fallback)
            draw.text((size//3, size//3), "üë¶", fill="white")
            return ImageTk.PhotoImage(fallback)


    def ve_kho_bau(self, size, path=r"D:/HCMUTE_IT/HK1_2025-2026/Artificial Intelligence/BaoCaoCuoiKy/BaoCaoCK_1/project_nhom_AI/AI_TruyTimKhoBau_2025/picture/treasure.png"):
        """Load h√¨nh kho b√°u t·ª´ file v√† scale v·ª´a kh√≠t √¥"""
        from PIL import Image, ImageTk

        try:
            img = Image.open(path).convert("RGBA")

            # X√≥a n·ªÅn tr·∫Øng n·∫øu c√≥
            datas = img.getdata()
            newData = []
            for item in datas:
                if item[0] > 240 and item[1] > 240 and item[2] > 240:
                    newData.append((255, 255, 255, 0))
                else:
                    newData.append(item)
            img.putdata(newData)

            # C·∫Øt v√πng th·ª±c (lo·∫°i b·ªè kho·∫£ng tr·ªëng)
            bbox = img.getbbox()
            if bbox:
                img = img.crop(bbox)

            # Resize v·ª´a kh√≠t √¥
            img = img.resize((size, size), Image.Resampling.LANCZOS)

            return ImageTk.PhotoImage(img)

        except Exception as e:
            print("‚ùå Kh√¥ng th·ªÉ t·∫£i ·∫£nh kho b√°u:", e)
            # T·∫°o ·∫£nh r·ªóng ƒë·ªÉ tr√°nh crash
            from PIL import ImageDraw
            fallback = Image.new("RGBA", (size, size), (255, 200, 0, 255))
            draw = ImageDraw.Draw(fallback)
            draw.text((size//3, size//3), "üí∞", fill="black")
            return ImageTk.PhotoImage(fallback)

    def animate_path(self, path, speed=8):
        """
        Cho c·∫≠u b√© di chuy·ªÉn m∆∞·ª£t, ƒë√∫ng t√¢m √¥, ƒë√® l√™n ƒë∆∞·ªùng ƒëi.
        T·ª± reset khi ch·∫°y thu·∫≠t to√°n m·ªõi.
        """
        if not path or len(path) < 2:
            return

        cell = self.cell_size
        coords = [
            (c * cell + cell / 2, r * cell + cell / 2)
            for (r, c) in path
        ]

        if hasattr(self, "player_image"):
            self.canvas.delete(self.player_image)

        OFFSET_X = 0
        OFFSET_Y = -2

        start_x, start_y = coords[0]
        self.player_image = self.canvas.create_image(
            start_x + OFFSET_X,
            start_y + OFFSET_Y,
            image=self.player_sprite,
            anchor="center"
        )

        def move_step(i=0):
            if i >= len(coords) - 1:
                print("üéØ C·∫≠u b√© ƒë√£ t·ªõi kho b√°u!")
                return

            x1, y1 = coords[i]
            x2, y2 = coords[i + 1]
            dx, dy = x2 - x1, y2 - y1
            dist = (dx**2 + dy**2) ** 0.5
            steps = max(1, int(dist / speed))
            step_dx, step_dy = dx / steps, dy / steps

            def smooth_move(step=0):
                if step <= steps:
                    self.canvas.move(self.player_image, step_dx, step_dy)
                    self.root.after(15, smooth_move, step + 1)
                else:
                    move_step(i + 1)

            smooth_move()

        move_step(0)


#==============================================================================================
# C√ÅC H√ÄM X·ª¨ L√ù S·ª∞ KI·ªÜN

    # X·ª≠ l√Ω √¢m thanh - N√∫t √¢m thanh
    def toggle_sound(self):
        self.sound_on = not self.sound_on
        if self.sound_on:
            self.btn_sound.config(text="üîä", bg="#4CAF50")
            pygame.mixer.music.play(-1)
        else:
            self.btn_sound.config(text="üîá", bg="#9E9E9E")
            pygame.mixer.music.stop()
            
    # Reset maze, path, status
    def reset(self):
        self.draw_maze(self.original_map)
        self.txt_TextArea.config(state=NORMAL)
        self.txt_TextArea.delete("1.0", END)
        self.txt_TextArea.config(state=DISABLED)
        #
        self.stop_timer()
        self.lbl_TimeValue.config(text="00:00:000")
    
    # Quay laij home - n√∫t home
    def go_home(self):
        """Quay l·∫°i m√†n h√¨nh StartScreen"""
        import StartScreen  # import ·ªü ƒë√¢y ƒë·ªÉ tr√°nh circular import
        
        # ƒê√≥ng c·ª≠a s·ªï hi·ªán t·∫°i
        self.root.destroy()

        # M·ªü l·∫°i StartScreen
        start_screen = StartScreen.StartScreen(on_start_callback=self.restart_game)
        start_screen.run()

    # def restart_game(self):
    #     """Callback ƒë·ªÉ ch·∫°y l·∫°i game t·ª´ StartScreen"""
    #     from main import TruyTimKhoBauApp
    #     app = TruyTimKhoBauApp()
    #     app.launch_main_game()

    def restart_game(self):
        """Callback ƒë·ªÉ ch·∫°y l·∫°i game t·ª´ StartScreen"""
        from main import TruyTimKhoBauApp
        app = TruyTimKhoBauApp()
        app.launch()


    def start_timer(self):
        """Kh·ªüi ƒë·ªông ƒë·ªìng h·ªì hi·ªÉn th·ªã song song v·ªõi ƒëo th·ªùi gian th·∫≠t"""
        self.start_time = time.perf_counter()
        self.timer_running = True

        def update_clock():
            if not self.timer_running:
                return
            elapsed = time.perf_counter() - self.start_time
            minutes = int(elapsed // 60)
            seconds = int(elapsed % 60)
            milliseconds = int((elapsed * 1000) % 1000)
            self.lbl_TimeValue.config(text=f"{minutes:02d}:{seconds:02d}:{milliseconds:03d}")
            self.root.after(50, update_clock)  # c·∫≠p nh·∫≠t m·ªói 50ms

        update_clock()

    def stop_timer(self):
        """D·ª´ng ƒë·ªìng h·ªì"""
        self.timer_running = False

#++++++++++++++++++++++++++++++++
    def giaoDien(self):
        self.root = Tk()
        self.root.title("üè¥‚Äç‚ò†Ô∏è TREASURE HUNTER - Th√°m Hi·ªÉm Kho B√°u")
        self.root.geometry("1000x700")
        self.root.minsize(800, 600)
        
        # Gradient background effect - GI·ªêNG V1
        #self.root.configure(bg="#1a1a2e")
        self.root.configure(bg=self.bg_color)

        
        # Configure grid weights for responsive design - GI·ªêNG V1
        self.root.grid_columnconfigure(0, weight=2)
        self.root.grid_columnconfigure(1, weight=1)
        self.root.grid_rowconfigure(0, weight=1)

        # Custom fonts - GI·ªêNG V1
        title_font = tkFont.Font(family="Arial Black", size=24, weight="bold")
        header_font = tkFont.Font(family="Arial", size=14, weight="bold")
        text_font = tkFont.Font(family="Arial", size=11)

        # Header frame spanning both columns - GI·ªêNG V1
        self.frm_Header = Frame(self.root, bg="#16213e", height=80)
        self.frm_Header.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=(10,5))
        self.frm_Header.grid_propagate(False)
        
        # Title with icons - GI·ªêNG V1
        self.lbl_Title = Label(
            self.frm_Header, 
            text="üè¥‚Äç‚ò†Ô∏è TREASURE HUNTER üíé",
            font=title_font,
            fg="#ffd700",
            bg="#16213e"
        )
        self.lbl_Title.pack(expand=True)

        # Header buttons frame (top-right)
        self.frm_HeaderButtons = Frame(self.frm_Header, bg="#16213e")
        self.frm_HeaderButtons.place(relx=1.0, rely=0.5, anchor="e")

        # N√∫t Home
        self.btn_home = Button(
            self.frm_HeaderButtons,
            text="üè†",
            font=("Arial", 16),
            fg="white",
            bg="#1abc9c",
            activebackground="#16a085",
            width=3,
            height=1,
            bd=0,
            relief="flat",
            cursor="hand2",
            command=self.go_home  # b·∫°n t·∫°o h√†m n√†y
        )
        self.btn_home.pack(side="right", padx=5)

        # N√∫t Sound
        self.btn_sound = Button(
            self.frm_HeaderButtons,
            text="üîä",
            font=("Arial", 16),
            fg="white",
            bg="#4CAF50",
            activebackground="#388E3C",
            width=3,
            height=1,
            bd=0,
            relief="flat",
            cursor="hand2",
            command=self.toggle_sound
        )
        self.btn_sound.pack(side="right", padx=5)

        # N√∫t Reset
        self.btn_reset = Button(
            self.frm_HeaderButtons,
            text="üîÑ",
            font=("Arial", 16),
            fg="white",
            bg="#FF9800",
            activebackground="#FB8C00",
            width=3,
            height=1,
            bd=0,
            relief="flat",
            cursor="hand2",
            command=self.reset
        )
        self.btn_reset.pack(side="right", padx=5)


        # Get controller and map data
        controller = TruyTimKhoBauContronller(self, self.selected_map)
        arr_Map = controller.getMap()
        self.soHang = controller.getSoHang()
        self.soCot = controller.getSoCot()
        
        # Create textures - T·ª™SION V2
        self.grass_light = self.ve_grass(self.cell_size, False)
        self.grass_dark = self.ve_grass(self.cell_size, True)
        self.wall_texture = self.ve_wall(self.cell_size)
        #self.player_sprite = self.ve_player(self.cell_size)
        self.player_sprite = self.ve_player(self.cell_size, "D:/HCMUTE_IT/HK1_2025-2026/Artificial Intelligence/BaoCaoCuoiKy/BaoCaoCK_1/project_nhom_AI/AI_TruyTimKhoBau_2025/picture/boy.png")
        #self.treasure_sprite = self.ve_kho_bau(self.cell_size)
        self.treasure_sprite = self.ve_kho_bau(self.cell_size, "D:/HCMUTE_IT/HK1_2025-2026/Artificial Intelligence/BaoCaoCuoiKy/BaoCaoCK_1/project_nhom_AI/AI_TruyTimKhoBau_2025/picture/treasure.png")


        # Main game area frame - GI·ªêNG V1 NH∆ØNG CH·ª®A CANVAS
        self.frm_VungDat = Frame(self.root, bg="#0f3460", bd=3, relief="raised")
        self.frm_VungDat.grid(row=1, column=0, sticky="nsew", padx=(10,5), pady=5)
        
        # Configure frame to be expandable
        self.frm_VungDat.grid_rowconfigure(0, weight=1)
        self.frm_VungDat.grid_columnconfigure(0, weight=1)
        
        # Canvas thay cho grid buttons - FULL SIZE
        self.canvas = Canvas(
            self.frm_VungDat,
            #bg='#4CAF50',
            bg=self.grass_color,  # thay m√†u n·ªÅn theo th√™m
            highlightthickness=0,
            bd=0
        )
        self.canvas.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        
        # Bind resize event ƒë·ªÉ canvas t·ª± ƒë·ªông scale
        self.canvas.bind('<Configure>', self.on_canvas_resize)

        # Draw initial maze - T·ª™ VERSION V2
        self.draw_maze(arr_Map)

        # Right panel container - GI·ªêNG V1
        self.frm_RightPanel = Frame(self.root, bg="#1a1a2e")
        self.frm_RightPanel.grid(row=1, column=1, sticky="nsew", padx=(5,10), pady=5)
        self.frm_RightPanel.grid_rowconfigure(1, weight=1)

        # Control panel - GI·ªêNG V1
        self.frm_ThongTin = Frame(
            self.frm_RightPanel, 
            bg="#16213e", 
            bd=3, 
            relief="raised"
        )
        self.frm_ThongTin.grid(row=0, column=0, sticky="ew", pady=(0,5))
        self.frm_ThongTin.grid_columnconfigure(0, weight=1)

        # Control panel header - GI·ªêNG V1
        self.lbl_ThongTin = Label(
            self.frm_ThongTin, 
            text="‚öôÔ∏è ƒêI·ªÄU KHI·ªÇN",
            font=header_font, 
            fg="#ffd700",
            bg="#16213e"
        )
        self.lbl_ThongTin.grid(row=0, column=0, pady=10, sticky="ew")

        # Algorithm selection - GI·ªêNG V1
        algo_frame = Frame(self.frm_ThongTin, bg="#16213e")
        algo_frame.grid(row=1, column=0, sticky="ew", padx=15, pady=5)
        algo_frame.grid_columnconfigure(1, weight=1)

        self.lbl_ThuatToan = Label(
            algo_frame, 
            text="üß† Thu·∫≠t to√°n:",
            font=text_font, 
            fg="#e94560",
            bg="#16213e"
        )
        self.lbl_ThuatToan.grid(row=0, column=0, sticky="w")

        # Style for combobox - GI·ªêNG V1
        style = ttk.Style()
        style.theme_use('clam')
        style.configure(
            'Custom.TCombobox',
            fieldbackground='#0f3460',
            background='#16213e',
            foreground='white',
            arrowcolor='#ffd700'
        )

        self.cbb_ThuatToan = ttk.Combobox(
            algo_frame,
            values=["üèÉ Greedy Search", "AStarSearch", "üå≤ DFS Search", "BFS Search", "Simulated Annealing", "CSP Backtracking", "And Or Tree", 
                    "MiniMax", "Genetic Algorithms", "PartialObservable Greedy", "ArcConsistency Algorithms", "AlphaBetaPruning"],
            font=text_font,
            state="readonly",
            style='Custom.TCombobox'
        )
        self.cbb_ThuatToan.current(0)
        self.cbb_ThuatToan.grid(row=1, column=0, columnspan=2, sticky="ew", pady=5)

        
        # Position info - GI·ªêNG V1
        pos_frame = Frame(self.frm_ThongTin, bg="#16213e")
        pos_frame.grid(row=2, column=0, sticky="ew", padx=15, pady=10)

        self.lbl_VTBatDau = Label(
            pos_frame,
            text="üöÄ ƒêi·ªÉm b·∫Øt ƒë·∫ßu: (0,0)",
            font=text_font,
            fg="#4fc3f7",
            bg="#16213e"
        )
        self.lbl_VTBatDau.pack(anchor="w", pady=2)

        self.lbl_VTKhoBau = Label(
            pos_frame,
            text=f"üí∞ Kho b√°u: ({self.soHang-1},{self.soCot-1})",
            font=text_font,
            fg="#4fc3f7",
            bg="#16213e"
        )
        self.lbl_VTKhoBau.pack(anchor="w", pady=2)

        # Start button - GI·ªêNG V1
        self.btn_BatDau = Button(
            self.frm_ThongTin,
            text="üéÆ B·∫ÆT ƒê·∫¶U PHI√äU L∆ØU!",
            font=tkFont.Font(family="Arial", size=12, weight="bold"),
            fg="white",
            bg="#e94560",
            activebackground="#ff6b7a",
            activeforeground="white",
            bd=0,
            relief="flat",
            cursor="hand2",
            command=self.runAlgorithm
        )
        self.btn_BatDau.grid(row=3, column=0, padx=15, pady=15, sticky="ew")
        
        # Add hover effect - GI·ªêNG V1
        def on_enter(e):
            self.btn_BatDau.configure(bg="#ff6b7a")
        def on_leave(e):
            self.btn_BatDau.configure(bg="#e94560")
        
        self.btn_BatDau.bind("<Enter>", on_enter)
        self.btn_BatDau.bind("<Leave>", on_leave)

        # Status panel - GI·ªêNG V1
        self.frm_TrangThai = Frame(
            self.frm_RightPanel, 
            bg="#16213e", 
            bd=3, 
            relief="raised"
        )
        self.frm_TrangThai.grid(row=1, column=0, sticky="nsew")
        self.frm_TrangThai.grid_columnconfigure(0, weight=1)
        self.frm_TrangThai.grid_rowconfigure(1, weight=1)


        # --- Header c·ªßa khung TR·∫†NG TH√ÅI + ƒê·ªìng h·ªì ---
        header_frame = Frame(self.frm_TrangThai, bg="#16213e")
        header_frame.grid(row=0, column=0, sticky="ew", padx=15, pady=10)
        header_frame.grid_columnconfigure(0, weight=1)

        # Ti√™u ƒë·ªÅ b√™n tr√°i
        self.lbl_TrangThai = Label(
            header_frame,
            text="üìä TR·∫†NG TH√ÅI",
            font=header_font,
            fg="#ffd700",
            bg="#16213e"
        )
        self.lbl_TrangThai.pack(side="left", anchor="w")

        # ƒê·ªìng h·ªì b√™n ph·∫£i
        self.lbl_TimeValue = Label(
            header_frame,
            text="00:00",
            font=("Consolas", 11, "bold"),
            fg="#ffeb3b",
            bg="#16213e"
        )
        self.lbl_TimeValue.pack(side="right", padx=(5, 0))

        self.lbl_TimeTitle = Label(
            header_frame,
            text="‚è± Th·ªùi gian:",
            font=("Arial", 11, "bold"),
            fg="#ffd700",
            bg="#16213e"
        )
        self.lbl_TimeTitle.pack(side="right", padx=(0, 5))

        # Text area with scrollbar - GI·ªêNG V1
        text_frame = Frame(self.frm_TrangThai, bg="#16213e")
        text_frame.grid(row=1, column=0, sticky="nsew", padx=15, pady=(0,15))
        text_frame.grid_columnconfigure(0, weight=1)
        text_frame.grid_rowconfigure(0, weight=1)

        self.txt_TextArea = Text(
            text_frame,
            wrap=WORD,
            bg="#0f3460",
            fg="#ffffff",
            font=text_font,
            bd=0,
            relief="flat",
            insertbackground="#ffd700"
        )
        self.txt_TextArea.grid(row=0, column=0, sticky="nsew")

        self.scrollbar = Scrollbar(text_frame, bg="#16213e", troughcolor="#0f3460")
        self.scrollbar.grid(row=0, column=1, sticky="ns")

        self.txt_TextArea.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.txt_TextArea.yview)

        # Welcome message - GI·ªêNG V1
        welcome_text = """üéØ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Treasure Hunter!

üó∫Ô∏è Nhi·ªám v·ª•: T√¨m ƒë∆∞·ªùng ƒë·∫øn kho b√°u
üöß Tr√°nh c√°c b·ª©c t∆∞·ªùng 
üèÉ Ch·ªçn thu·∫≠t to√°n v√† b·∫Øt ƒë·∫ßu!

Ch√∫c b·∫°n may m·∫Øn! üçÄ"""
        
        self.txt_TextArea.insert("1.0", welcome_text)
        self.txt_TextArea.config(state=DISABLED)

        self.controller = controller
        self.original_map = [row[:] for row in arr_Map]
        self.path_objects = []

                # --- N√∫t n·ªïi g√≥c ph·∫£i d∆∞·ªõi ---
        self.frm_FloatingButtons = Frame(self.root, bg="#1a1a2e")
        self.frm_FloatingButtons.place(relx=0.97, rely=0.93, anchor="se")

        # N√∫t "L·ªãch s·ª≠"
        self.btn_history = Button(
            self.frm_FloatingButtons,
            text="üìú L·ªãch s·ª≠",
            font=("Arial", 11, "bold"),
            fg="white",
            bg="#8e44ad",
            activebackground="#9b59b6",
            activeforeground="white",
            width=10,
            height=1,
            bd=0,
            relief="flat",
            cursor="hand2",
            command=self.show_history_window
        )
        self.btn_history.pack(pady=(0, 8))

        # N√∫t "So s√°nh"
        self.btn_compare = Button(
            self.frm_FloatingButtons,
            text="‚öñÔ∏è So s√°nh",
            font=("Arial", 11, "bold"),
            fg="white",
            bg="#16a085",
            activebackground="#1abc9c",
            activeforeground="white",
            width=10,
            height=1,
            bd=0,
            relief="flat",
            cursor="hand2",
            command=self.compare_algorithms
        )
        self.btn_compare.pack()

        
        self.root.mainloop()

    # ================================
    # üìú HI·ªÇN TH·ªä C·ª¨A S·ªî L·ªäCH S·ª¨
    # ================================
    def show_history_window(self):
        if not self.run_history:
            messagebox.showinfo("L·ªãch s·ª≠", "Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o ƒë∆∞·ª£c ghi nh·∫≠n!")  # ‚úÖ s·ª≠a d√≤ng n√†y
            return

        win = Toplevel(self.root)  # ‚úÖ s·ª≠a d√≤ng n√†y (b·ªè Tk.Toplevel)
        win.title("üìú L·ªãch s·ª≠ ch·∫°y thu·∫≠t to√°n")
        win.geometry("500x300")
        win.config(bg="#2C3E50")

        lbl = Label(win, text="üß† L·ªäCH S·ª¨ CH·∫†Y THU·∫¨T TO√ÅN", font=("Arial", 14, "bold"),
                    fg="#F1C40F", bg="#2C3E50")
        lbl.pack(pady=10)

        tree = ttk.Treeview(win, columns=("algo", "time", "path", "when"), show="headings")
        tree.heading("algo", text="Thu·∫≠t to√°n")
        tree.heading("time", text="Th·ªùi gian ch·∫°y")
        tree.heading("path", text="ƒê·ªô d√†i ƒë∆∞·ªùng ƒëi")
        tree.heading("when", text="Th·ªùi ƒëi·ªÉm")
        tree.column("algo", width=180)
        tree.column("time", width=100, anchor="center")
        tree.column("path", width= 100)
        tree.column("when", width=180)

        for entry in self.run_history:
            tree.insert(
                "", "end",
                values=(
                    entry.get("thu·∫≠t to√°n", ""),
                    entry.get("th·ªùi gian ch·∫°y", ""),
                    entry.get("ƒë·ªô d√†i ƒë∆∞·ªùng ƒëi", 0),
                    entry.get("th·ªùi ƒëi·ªÉm", "")
                )
            )

        tree.pack(fill="both", expand=True, padx=10, pady=10)


    def compare_algorithms(self):
        """Ch·∫°y t·∫•t c·∫£ c√°c thu·∫≠t to√°n v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì so s√°nh"""
        import matplotlib.pyplot as plt
        from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
        from tkinter import Toplevel, Label, messagebox

        # Danh s√°ch thu·∫≠t to√°n mu·ªën so s√°nh
        algorithms = [
            "BFS", "DFS", "Greedy", "AStarSearch",
            "Simulated Annealing", "CSP Backtracking",
            "And Or Tree", "MiniMax",
            "PartialObservable Greedy", "ArcConsistency Algorithms",
            "AlphaBetaPruning"
        ]

        results = []

        # Ch·∫°y l·∫ßn l∆∞·ª£t t·ª´ng thu·∫≠t to√°n
        for algo in algorithms:
            try:
                path, elapsed_ms = self.controller.run_algorithm(algo)
                path_length = int(len(path)) if path else 0
                results.append({
                    "thu·∫≠t to√°n": algo,
                    "th·ªùi gian ch·∫°y": round(elapsed_ms, 2),
                    "ƒë·ªô d√†i ƒë∆∞·ªùng ƒëi": path_length
                })
                print(f"‚úÖ {algo}: {elapsed_ms:.2f} ms, path = {path_length}")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi ch·∫°y {algo}: {e}")

        if not results:
            messagebox.showwarning("‚ö†Ô∏è", "Kh√¥ng c√≥ thu·∫≠t to√°n n√†o ch·∫°y th√†nh c√¥ng!")
            return

        # T·∫°o c·ª≠a s·ªï hi·ªÉn th·ªã k·∫øt qu·∫£
        win = Toplevel(self.root)
        win.title("‚öñÔ∏è So s√°nh hi·ªáu su·∫•t c√°c thu·∫≠t to√°n")
        win.geometry("900x550")
        win.config(bg="#2C3E50")

        Label(
            win,
            text="üìä SO S√ÅNH HI·ªÜU SU·∫§T C√ÅC THU·∫¨T TO√ÅN",
            font=("Arial", 15, "bold"),
            fg="#F1C40F",
            bg="#2C3E50"
        ).pack(pady=10)

        # Chu·∫©n b·ªã d·ªØ li·ªáu bi·ªÉu ƒë·ªì
        algos = [r["thu·∫≠t to√°n"] for r in results]
        times = [r["th·ªùi gian ch·∫°y"] for r in results]
        lengths = [r["ƒë·ªô d√†i ƒë∆∞·ªùng ƒëi"] for r in results]

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig, ax1 = plt.subplots(figsize=(9, 4))
        x = range(len(algos))
        width = 0.35

        bars1 = ax1.bar(
            [i - width / 2 for i in x],
            times,
            width,
            label="‚è± Th·ªùi gian (ms)",
            color="#1abc9c"
        )
        bars2 = ax1.bar(
            [i + width / 2 for i in x],
            lengths,
            width,
            label="üìè ƒê·ªô d√†i ƒë∆∞·ªùng ƒëi",
            color="#e67e22"
        )

        # Th√™m nh√£n & ƒë·ªãnh d·∫°ng
        ax1.set_title("So s√°nh th·ªùi gian ch·∫°y v√† ƒë·ªô d√†i ƒë∆∞·ªùng ƒëi", fontsize=13, fontweight="bold")
        ax1.set_xlabel("Thu·∫≠t to√°n")
        ax1.set_xticks(list(x))
        ax1.set_xticklabels(algos, rotation=30, ha="right")
        ax1.legend()
        ax1.grid(True, linestyle="--", alpha=0.5)

        # --- hi·ªÉn th·ªã s·ªë tr√™n ƒë·∫ßu c·ªôt ---
        for bar in bars1:  # c·ªôt th·ªùi gian
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2, height + 2,
                    f"{height:.3f}", ha="center", va="bottom", fontsize=8, color="#16a085")

        for bar in bars2:  # c·ªôt ƒë·ªô d√†i ƒë∆∞·ªùng ƒëi
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2, height + 1,
                    f"{int(height)}", ha="center", va="bottom", fontsize=8, color="#d35400")

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong c·ª≠a s·ªï Tkinter
        canvas = FigureCanvasTkAgg(fig, master=win)
        canvas.get_tk_widget().pack(fill="both", expand=True)
        canvas.draw()

    def on_canvas_resize(self, event):
        """Handle canvas resize ƒë·ªÉ t·ª± ƒë·ªông scale maze"""
        if hasattr(self, 'original_map'):
            # T√≠nh to√°n cell size m·ªõi d·ª±a tr√™n k√≠ch th∆∞·ªõc canvas
            canvas_width = event.width - 20  # Tr·ª´ padding
            canvas_height = event.height - 20
            
            # T√≠nh cell size t·ªëi ∆∞u
            cell_w = canvas_width // self.soCot
            cell_h = canvas_height // self.soHang
            new_cell_size = min(cell_w, cell_h, 60)  # Max 60px
            
            if new_cell_size != self.cell_size and new_cell_size > 20:
                self.cell_size = new_cell_size
                # Recreate textures v·ªõi size m·ªõi
                self.grass_light = self.ve_grass(self.cell_size, False)
                self.grass_dark = self.ve_grass(self.cell_size, True)
                self.wall_texture = self.ve_wall(self.cell_size)
                self.player_sprite = self.ve_player(self.cell_size)
                self.treasure_sprite = self.ve_kho_bau(self.cell_size)
                
                # Redraw maze
                self.draw_maze(self.original_map)

    def draw_maze(self, arr_map):
        """V·∫Ω maze v·ªõi Canvas v√† textures ƒë·∫πp - FULL SIZE"""
        self.canvas.delete("all")
        
        # L·∫•y k√≠ch th∆∞·ªõc canvas hi·ªán t·∫°i
        self.canvas.update_idletasks()
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        
        if canvas_width <= 1 or canvas_height <= 1:
            # Canvas ch∆∞a ƒë∆∞·ª£c render, d√πng default
            canvas_width = 600
            canvas_height = 400
        
        # T√≠nh to√°n ƒë·ªÉ maze n·∫±m gi·ªØa canvas
        total_maze_width = self.soCot * self.cell_size
        total_maze_height = self.soHang * self.cell_size
        
        start_x = max(10, (canvas_width - total_maze_width) // 2)
        start_y = max(10, (canvas_height - total_maze_height) // 2)
        
        # Draw checkerboard pattern
        for i in range(self.soHang):
            for j in range(self.soCot):
                x = start_x + j * self.cell_size
                y = start_y + i * self.cell_size
                
                # Checkerboard pattern
                is_dark_square = (i + j) % 2 == 0


                
                if arr_map[i][j] == 0:  # Empty path
                    grass_texture = self.grass_dark if is_dark_square else self.grass_light
                    self.canvas.create_image(x, y, image=grass_texture, anchor="nw")
                
                elif arr_map[i][j] == 1:  # Player start
                    grass_texture = self.grass_dark if is_dark_square else self.grass_light
                    self.canvas.create_image(x, y, image=grass_texture, anchor="nw")
                    self.canvas.create_image(x, y, image=self.player_sprite, anchor="nw")
                
                elif arr_map[i][j] == 2:  # Wall
                    self.canvas.create_image(x, y, image=self.wall_texture, anchor="nw")
                    # 3D shadow effect
                    shadow_offset = 3
                    self.canvas.create_rectangle(
                        x + self.cell_size - shadow_offset, y + shadow_offset, 
                        x + self.cell_size, y + self.cell_size,
                        fill='#424242', outline='', stipple='gray25'
                    )
                
                elif arr_map[i][j] == 5:  # Treasure
                    grass_texture = self.grass_dark if is_dark_square else self.grass_light
                    self.canvas.create_image(x, y, image=grass_texture, anchor="nw")
                    self.canvas.create_image(x, y, image=self.treasure_sprite, anchor="nw")

        # Draw grid lines v·ªõi position m·ªõi
        self.draw_grid(start_x, start_y)

    def draw_grid(self, start_x=10, start_y=10):
        """V·∫Ω l∆∞·ªõi nh·∫π v·ªõi position t√πy ch·ªânh"""
        for i in range(self.soHang + 1):
            y = start_y + i * self.cell_size
            self.canvas.create_line(
                start_x, y, start_x + self.soCot * self.cell_size, y, 
                fill='#2E7D32', width=1, stipple='gray12'
            )
        
        for j in range(self.soCot + 1):
            x = start_x + j * self.cell_size
            self.canvas.create_line(
                x, start_y, x, start_y + self.soHang * self.cell_size, 
                fill='#2E7D32', width=1, stipple='gray12'
            )



    def draw_path_step(self, i, j):
        """V·∫Ω m·ªôt b∆∞·ªõc ƒë∆∞·ªùng ƒëi (kh√¥ng hi·ªÉn th·ªã s·ªë) v√† tr·∫£ v·ªÅ t√¢m √¥ ƒë·ªÉ n·ªëi ti·∫øp."""
        # T√≠nh l·∫°i start position
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        total_maze_width = self.soCot * self.cell_size
        total_maze_height = self.soHang * self.cell_size

        start_x = max(10, (canvas_width - total_maze_width) // 2)
        start_y = max(10, (canvas_height - total_maze_height) // 2)

        x = start_x + j * self.cell_size
        y = start_y + i * self.cell_size
        center_x = x + self.cell_size // 2
        center_y = y + self.cell_size // 2

        # V·∫Ω marker (oval nh·ªè) ‚Äî n·∫øu mu·ªën ch·ªâ ƒë∆∞·ªùng kh√¥ng c·∫ßn marker, c√≥ th·ªÉ b·ªè block n√†y
        path_obj = self.canvas.create_oval(
            center_x - max(6, self.cell_size//8),
            center_y - max(6, self.cell_size//8),
            center_x + max(6, self.cell_size//8),
            center_y + max(6, self.cell_size//8),
            fill="#42A5F5", outline="#1976D2", width=2
        )

        # L∆∞u object (n·∫øu b·∫°n mu·ªën x√≥a sau n√†y)
        self.path_objects.append(path_obj)

        # Tr·∫£ v·ªÅ t√¢m ƒë·ªÉ runAlgorithm c√≥ th·ªÉ n·ªëi line t·ª´ ƒëi·ªÉm tr∆∞·ªõc t·ªõi ƒëi·ªÉm n√†y
        return (center_x, center_y)

# ƒë·ªìng d·∫°ng format
    def runAlgorithm(self):
        """Ch·∫°y thu·∫≠t to√°n ƒë∆∞·ª£c ch·ªçn, ƒëo th·ªùi gian th·ª±c t·∫ø v√† hi·ªÉn th·ªã k·∫øt qu·∫£"""
        # üßπ X√≥a ƒë∆∞·ªùng ƒëi c≈©
        for obj in self.path_objects:
            self.canvas.delete(obj)
        self.path_objects.clear()
        self.draw_maze(self.original_map)

        algo_name = self.cbb_ThuatToan.get()
        if not algo_name:
            messagebox.showwarning("Ch√∫ √Ω", "Vui l√≤ng ch·ªçn thu·∫≠t to√°n!")
            return

        self.txt_TextArea.config(state=NORMAL)
        self.txt_TextArea.delete("1.0", END)
        self.txt_TextArea.insert("end", f"üöÄ B·∫Øt ƒë·∫ßu ch·∫°y {algo_name}...\n\n")
        self.txt_TextArea.config(state=DISABLED)
        self.root.update()


        start_dt = datetime.datetime.now()

# üïí B·∫Øt ƒë·∫ßu ƒë·∫øm v√† ch·∫°y thu·∫≠t to√°n
        self.start_timer()
        start_time = time.perf_counter()

        try:
            print("Thu·∫≠t to√°n ƒë√£ ch·ªçn: ", algo_name)
            path, elapsed_ms = self.controller.run_algorithm(algo_name)
                        
            if path:
                self.animate_path(path, speed=8)
        finally:
            self.stop_timer()
            end_time = time.perf_counter()
        formatted_time = f"{elapsed_ms:.3f} ms"
        self.lbl_TimeValue.config(text=formatted_time)



        # ‚úÖ L∆∞u l·ªãch s·ª≠ v·ªõi format th·ªëng nh·∫•t
        path_length = len(path) if path else 0
        self.run_history.append({
            "thu·∫≠t to√°n": algo_name,
            "th·ªùi gian ch·∫°y": f"{elapsed_ms:.3f} ms",
            "ƒë·ªô d√†i ƒë∆∞·ªùng ƒëi": len(path) if path else 0,
            "th·ªùi ƒëi·ªÉm": start_dt.strftime("%H:%M:%S %d-%m-%Y")
        })


        # üîç Hi·ªÉn th·ªã k·∫øt qu·∫£ thu·∫≠t to√°n
        if not path:
            self.txt_TextArea.config(state=NORMAL)
            self.txt_TextArea.insert("end", "‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒëi!\n")
            self.txt_TextArea.config(state=DISABLED)
            return

        self.txt_TextArea.config(state=NORMAL)
        self.txt_TextArea.insert("end", f"‚úÖ ƒê√£ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi! ({len(path)} b∆∞·ªõc)\n")
        self.txt_TextArea.insert("end", "üé¨ ƒêang hi·ªÉn th·ªã ƒë∆∞·ªùng ƒëi...\n\n")
        self.txt_TextArea.config(state=DISABLED)
        self.root.update()

        # üåÄ Animation hi·ªÉn th·ªã ƒë∆∞·ªùng ƒëi
        last_center = None
        for step, (i, j) in enumerate(path[1:-1], 1):
            center = self.draw_path_step(i, j)
            if last_center:
                line = self.canvas.create_line(
                    last_center[0], last_center[1],
                    center[0], center[1],
                    width=max(3, self.cell_size // 10),
                    smooth=True, splinesteps=12, fill="#42A5F5"
                )
                self.path_objects.append(line)
            last_center = center

            self.txt_TextArea.config(state=NORMAL)
            self.txt_TextArea.insert("end", f"B∆∞·ªõc {step}: ({i}, {j})\n")
            self.txt_TextArea.see("end")
            self.txt_TextArea.config(state=DISABLED)
            self.root.update()
            self.root.after(250)

        # üèÅ K·∫øt th√∫c - Hi·ªáu ·ª©ng chi·∫øn th·∫Øng
        self.txt_TextArea.config(state=NORMAL)
        self.txt_TextArea.insert("end", "\nüéâ ƒê√É T√åM TH·∫§Y KHO B√ÅU! üíé‚ú®\n")
        self.txt_TextArea.insert("end", "üèÜ Ch√∫c m·ª´ng b·∫°n!\n")
        self.txt_TextArea.config(state=DISABLED)
        self.txt_TextArea.see("end")

        self.add_victory_effect()
        self.show_win_overlay()



    def add_victory_effect(self):
        """Hi·ªáu ·ª©ng chi·∫øn th·∫Øng v·ªõi position t√πy ch·ªânh"""
        # T√≠nh l·∫°i start position cho victory effect
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        total_maze_width = self.soCot * self.cell_size
        total_maze_height = self.soHang * self.cell_size
        
        start_x = max(10, (canvas_width - total_maze_width) // 2)
        start_y = max(10, (canvas_height - total_maze_height) // 2)
        
        # Find treasure position
        for i in range(self.soHang):
            for j in range(self.soCot):
                if self.original_map[i][j] == 5:
                    x = start_x + j * self.cell_size + self.cell_size // 2
                    y = start_y + i * self.cell_size + self.cell_size // 2
                    
                    # Create sparkles
                    sparkles = []
                    for k in range(8):
                        angle = k * 45
                        radius = self.cell_size // 2 + 10
                        dx = radius * math.cos(math.radians(angle))
                        dy = radius * math.sin(math.radians(angle))
                        
                        sparkle = self.canvas.create_text(
                            x + dx, y + dy, text="‚ú®",
                            font=("Arial", max(12, self.cell_size//3)), fill="#f1c40f"
                        )
                        sparkles.append(sparkle)
                    
                    # Remove sparkles after 2 seconds
                    def remove_sparkles():
                        for sparkle in sparkles:
                            self.canvas.delete(sparkle)
                    
                    self.root.after(2000, remove_sparkles)
                    break



    def show_win_overlay(self):
        """Hi·ªÉn th·ªã d√≤ng YOU WIN trong su·ªët ngay tr√™n canvas + nh·∫°c win"""
        import pygame

        # --- T·∫†M D·ª™NG NH·∫†C N·ªÄN ---
        try:
            if pygame.mixer.get_init():
                pygame.mixer.music.stop()
        except:
            pass

        # --- PH√ÅT NH·∫†C WIN ---
        try:
            pygame.mixer.init()
            pygame.mixer.music.load(r"D:/HCMUTE_IT/HK1_2025-2026/Artificial Intelligence/BaoCaoCuoiKy/BaoCaoCK_1/project_nhom_AI/AI_TruyTimKhoBau_2025/sounds/win.wav")
            pygame.mixer.music.play()
        except Exception as e:
            print("Kh√¥ng ph√°t ƒë∆∞·ª£c nh·∫°c chi·∫øn th·∫Øng:", e)

        w = self.canvas.winfo_width()
        h = self.canvas.winfo_height()

        # n·ªÅn m·ªù trong su·ªët
        overlay = self.canvas.create_rectangle(0, 0, w, h, fill="black", stipple="gray50", outline="")

        # ch·ªØ YOU WIN
        text_id = self.canvas.create_text(
            w / 2, h / 2,
            text="YOU WIN",
            fill="white",
            font=("Arial Black", 64, "bold")
        )

        # t·∫°o nhi·ªÅu ph√°o hoa ƒë·∫πp h∆°n
        fireworks = []
        for _ in range(20):
            x = random.randint(int(w * 0.1), int(w * 0.9))
            y = random.randint(int(h * 0.2), int(h * 0.7))
            fireworks.append(_Firework(self.canvas, x, y))

        # animation loop
        def animate():
            alive = False
            for fw in fireworks[:]:
                if not fw.step():
                    fireworks.remove(fw)
                else:
                    alive = True
            if alive:
                self.root.after(50, animate)

        animate()

        # --- CLICK ƒê·ªÇ THO√ÅT ---
        def remove_overlay(event=None):
            self.canvas.delete(overlay)
            self.canvas.delete(text_id)
            for fw in fireworks:
                for p in fw.particles:
                    self.canvas.delete(p["id"])
            self.canvas.unbind("<Button-1>")

            # D·ª™NG NH·∫†C WIN
            if pygame.mixer.get_init():
                pygame.mixer.music.stop()

            # PH√ÅT L·∫†I NH·∫†C N·ªÄN
            try:
                pygame.mixer.music.load(r"D:/HCMUTE_IT/HK1_2025-2026/Artificial Intelligence/BaoCaoCuoiKy/BaoCaoCK_1/project_nhom_AI/AI_TruyTimKhoBau_2025/sounds/bg_music.mp3")
                pygame.mixer.music.play(-1)
            except Exception as e:
                print("Kh√¥ng ph√°t ƒë∆∞·ª£c nh·∫°c n·ªÅn:", e)

        self.canvas.bind("<Button-1>", remove_overlay)


if __name__ == "__main__":
    view = TruyTimKhoBauView()